package ru.geekbrains.homework7;

import ru.geekbrains.homework7.entity.Cat;
import ru.geekbrains.homework7.entity.Plate;


// 1. Задачу про котов и тарелки с едой:
//      Для этого в класс Cat добавил внутренний класс реализующий интерфей Runnable иля создания у каждого кота потока
//      который будет его кормить. Т.к. коты должны есть из одной миски а последовательно они это
//      делать не могут.
//      Тарелку с едой из простого числового значения заменил на список содержащий разные виды еды, у каждого своя
//      сытность. Это позволило контроллировать количество еды в миске и не давать коту съесть больше чем в ней есть
//      (задание 2). Еда реализована с помощью enum, которому добавлен конструктор с двумя полями (имя и сытность) и два
//      геттера.
//      В класс Plate добавил внутренний класс реализующий интерфей Runnable иля создания потока который будет наполнять
//      миску когда она станет пустой это соответствут заданию 6.
// 3. Поле сытость для котов вместо логического типа сделал числовым типом, чтобы увеличивать его в зависимости от
// сытности блюда которое он съел. Изменил конструктор класса Cat, на вход подается имя кота, его вес (вместо аппетита,
// т.к. вес значение более известное) а аппетит расчитывается программно и тарелку с которой кот будет есть.
// 4. В конце задания 4 в скобка написано: это сделано для упрощения логики программы. Упрощать ранее созданную логику
// не стал, т.к. изначально в миске разние виды еды с разной сытностью и каждый кот пытается ухватить сымый большой
// кусок. При этом есть ограничение: кот не может съесть еду сытность которой превысит его максимально значение
// аппетита. Так же учитывая что по заданию 6 миска должна пополнятся, в логике потока кормления котов заложено что коты
// могут проголодаться. Это происходит когда кот насытился на 100% и лег спать, когда миска пуста и он ждет ее
// пополнения или когда кот еще не насытился на 100% и миска не пуста но при это в ней ней еды сытность которой устроит
// кота, в этом случае кот также ждет и сытость уменьшается.
// 5. Массив (в моем случае динамичский) содержащий всех созданных котов добавил в класс Cat. Котов в него добавляет
// конструктор при их создании. Так же при создании запускаются потоки, отдельный для каждого кота, которые их кормят.
// При создании объекта класса Plate также запускается поток, который ждет когда миска станет пустой и напоняет ее
// произвольными видами еды. Все обращения к миски с едой происходят через синхронизированные методы (кроме создания и
// инициализации ее в конструкторе).
//
public class Homework7 {
    private final static int TIME_WORKING = 30000;

    public static void main(String[] args) {
        Plate plate = new Plate(5);
        new Cat("Барсик", 5, plate);
        new Cat("Том", 6, plate);
        new Cat("Базилио", 7, plate);

        try {
            Thread.sleep(TIME_WORKING);
        } catch (InterruptedException e) {
            e.printStackTrace();
        }

        plate.stopService();
    }
}
